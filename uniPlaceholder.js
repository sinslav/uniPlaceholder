var UniPlaceholder;

UniPlaceholder = (function() {
  function UniPlaceholder(el) {
    this.$block = $(el);
    this.initUniPlaceholder();
  }

  UniPlaceholder.prototype.initUniPlaceholder = function() {
    var $helperEl;
    this.getPlaceholder();
    this.$block.wrap("<div class='uni-placeholder'></div>");
    this.$wraper = $(".uni-placeholder");
    $helperEl = $("<span class='uni-placeholder-helper'></span>");
    $helperEl.insertAfter(this.$block);
    this.$helper = $(".uni-placeholder-helper");
    return this.eventRouter();
  };

  UniPlaceholder.prototype.eventRouter = function() {
    this.$block.keypress(this.preventHandler.bind(this));
    this.$block.on('input', this.inputHandler.bind(this));
    this.$block.on('keyup', this.updateHelper.bind(this));
    return this.$helper.click(this.clickHandler.bind(this));
  };

  UniPlaceholder.prototype.clickHandler = function() {
    return this.$block.focus();
  };

  UniPlaceholder.prototype.getPlaceholder = function() {
    return this.placeholder = this.$block.attr('placeholder').split(' ') || [];
  };

  UniPlaceholder.prototype.inputHandler = function(e) {
    this.charCount = this.$block.val().split('').length;
    this.wordCount = this.$block.val().trim().split(" ").length;
    this.inputedTextWidth = this.$block.textWidth();
    if (this.charCount) {
      this.$helper.addClass('in');
    } else {
      this.$helper.removeClass('in');
    }
    return this.$helper.css('left', this.inputedTextWidth);
  };

  UniPlaceholder.prototype.preventHandler = function(e) {
    var key, wordCount;
    key = e.keyCode;
    wordCount = this.$block.val().split(" ").length;
    if ((48 <= key && key <= 57) || (wordCount > @placeholder.length && key !== 8 && key !== 46)) {
      return e.preventDefault();
    }
  };

  UniPlaceholder.prototype.updateHelper = function() {
    this.helperText = this.placeholder.slice(this.wordCount).join(" ");
    return this.$helper.text(this.helperText);
  };

  return UniPlaceholder;

})();

$(function() {
  $.fn.textWidth = function(text, font) {
    if (!$.fn.textWidth.fakeEl) {
      $.fn.textWidth.fakeEl = $('<span>').css("white-space", "pre").hide().appendTo(document.body);
    }
    $.fn.textWidth.fakeEl.text(text || this.val().edgeTrim() || this.text()).css('font', font || this.css('font'));
    return $.fn.textWidth.fakeEl.width();
  };
  if (!$("[data-uni-placeholder]").length) {
    return;
  }
  return $("[data-uni-placeholder]").each(function(i, item) {
    return new UniPlaceholder(item);
  });
});

String.prototype.edgeTrim = function() {
  return this.replace(/(^\s+|\s+$)/g, '');
};

// ---
// generated by coffee-script 1.9.2